{% if GIT_DESCRIBE_NUMBER > '0' %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] + '.post' + GIT_DESCRIBE_NUMBER %}
{% else %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] %}
{% endif %}
{% set PKG_NAME = 'base-node-rpc' %}
{% set LIB_NAME = 'BaseNodeRpc' %}
{% set MODULE_NAME = PKG_NAME.replace('-', '_') %}
package:
  name: {{ PKG_NAME }}
  version: {{ GIT_VERSION }}

build:
  # If this is a new build for the same version, increment the build number.
  # If you do not include this key, it defaults to 0.
  number: 0
  noarch: python
  script:
    # Copy Arduino library to Conda include directory and generate Arduino `library.properties` file
    - python file_handler.py {{ SRC_DIR }} {{ PREFIX }} {{ PKG_NAME }} {{ MODULE_NAME }} {{ LIB_NAME }}
    # Run setup
    - python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python >=3.8
    - numpy
    - nadamq
    - jinja2
    - blinker
    - protobuf
    - or-event
    - platformio
    - asyncserial
    - json-tricks
    - arduino-rpc
    - serial-device
    - path-helpers
    - clang-helpers
    - logging-helpers
    - platformio-helpers
    - dropbot-headers

outputs:
  - name: {{ PKG_NAME }}-dev
    noarch: generic
    files:
      - share
    requirements:
      run:
        - platformio
        - dropbot-headers
  - name: {{ PKG_NAME }}
    noarch: python
    files:
      - {{ SP_DIR }}/{{ MODULE_NAME }}
    requirements:
      run:
        - python >=3.8
        - {{ pin_subpackage(PKG_NAME + '-dev', max_pin='x.x') }}
        - numpy
        - nadamq
        - jinja2
        - blinker
        - protobuf
        - or-event
        - platformio
        - asyncserial
        - json-tricks
        - arduino-rpc
        - serial-device
        - path-helpers
        - clang-helpers
        - logging-helpers
        - platformio-helpers
      test:
        imports:
          - {{ MODULE_NAME }}
          - {{ MODULE_NAME }}._version
          - {{ MODULE_NAME }}.ser_async
          - {{ MODULE_NAME }}.bin.upload
          - {{ MODULE_NAME }}.bootloader_driver
          - {{ MODULE_NAME }}.intel_hex
          - {{ MODULE_NAME }}.node
          - {{ MODULE_NAME }}.protobuf
          - {{ MODULE_NAME }}.proxy
          - {{ MODULE_NAME }}.queue

about:
  home: https://github.com/sci-bots/{{ PKG_NAME }}
  license: MIT
  summary: Base classes for Arduino RPC node/device.

# source will be downloaded prior to filling in jinja templates
# Example assumes that this folder has setup.py in it
source:
#  git_url: ../
  path: ..